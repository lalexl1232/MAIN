# -*- coding: utf-8 -*-
"""laba2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ba2aQSFdJp4HdyEZCcEJ5n3peIwQcWnr
"""

import numpy as np
import seaborn as sns
import pandas as pd
from google.colab import files

file = files.upload()

df = pd.read_csv('CAR_DETAILS_FROM_CAR_DEKHO.csv')
ds = df.copy()
df.head(15)

ds.name = ds.name.apply(lambda x : x.split(' ')[0])
ds.head()

ds.describe()

from sklearn.preprocessing import OneHotEncoder
ohe = OneHotEncoder()
transformed = ohe.fit_transform(ds[['name']])
# print(transformed.toarray()) выводит матрицу с значениями преобразованных разных видов марок
print(ohe.categories_) #выводит все виды марок
ds[ohe.categories_[0]] = transformed.toarray()
ds.drop('name', axis = 1, inplace = True)

transformed = ohe.fit_transform(ds[['fuel']])
# print(transformed.toarray()) выводит матрицу с значениями преобразованных разных видов топлива
print(ohe.categories_) #выводит все виды топлива
ds[ohe.categories_[0]] = transformed.toarray()
ds.drop('fuel', axis = 1, inplace = True)

transformed = ohe.fit_transform(ds[['seller_type']])
# print(transformed.toarray()) выводит матрицу с значениями преобразованных разных видов продавцов
print(ohe.categories_) #выводит все виды продавцов
ds[ohe.categories_[0]] = transformed.toarray()
ds.drop('seller_type', axis = 1, inplace = True)

transformed = ohe.fit_transform(ds[['transmission']])
# print(transformed.toarray()) выводит матрицу с значениями преобразованных разных видов коробка передач
print(ohe.categories_) #выводит все виды коробки передач
ds[ohe.categories_[0]] = transformed.toarray()
ds.drop('transmission', axis = 1, inplace = True)

transformed = ohe.fit_transform(ds[['owner']])
# print(transformed.toarray()) выводит матрицу с значениями преобразованных разных видов количества владельцев
print(ohe.categories_) #выводит все виды количеств владьцев
ds[ohe.categories_[0]] = transformed.toarray()
ds.drop('owner', axis = 1, inplace = True)

ds.year = 2022 - ds.year
ds.shape

import matplotlib.pyplot as plt 
plt.figure(figsize = (12, 8))
ds.groupby('year').mean().selling_price.plot(kind = 'bar')

ds.head()

print(sorted(ds.selling_price)) #цены машин сортированные по возрастанию

graph = ds[['selling_price', 'km_driven', 'year']]
sns.pairplot(graph)

ds.columns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import mean_absolute_error
y = ds['selling_price']
x = ds[['year', 'km_driven', 'Ambassador', 'Audi', 'BMW',
       'Chevrolet', 'Daewoo', 'Datsun', 'Fiat', 'Force', 'Ford', 'Honda',
       'Hyundai', 'Isuzu', 'Jaguar', 'Jeep', 'Kia', 'Land', 'MG', 'Mahindra',
       'Maruti', 'Mercedes-Benz', 'Mitsubishi', 'Nissan', 'OpelCorsa',
       'Renault', 'Skoda', 'Tata', 'Toyota', 'Volkswagen', 'Volvo', 'CNG',
       'Diesel', 'Electric', 'LPG', 'Petrol', 'Dealer', 'Individual',
       'Trustmark Dealer', 'Automatic', 'Manual', 'First Owner',
       'Fourth & Above Owner', 'Second Owner', 'Test Drive Car', 'Third Owner']]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 13)

rez = []
model = LinearRegression(fit_intercept = True)
model.fit(x_train, y_train)
rez.append(mean_absolute_error(y_test, model.predict(x_test)))
mean_absolute_error(y_test, model.predict(x_test))

koef = [0.1, 0.5, 1, 2, 5, 10]
for i in koef:
  model = Lasso(alpha = i, fit_intercept = True)
  model.fit(x_train, y_train)
  rez.append(mean_absolute_error(y_test, model.predict(x_test)))
  print(mean_absolute_error(y_test, model.predict(x_test)))

for i in koef:
  model = Ridge(alpha = i, fit_intercept = True)
  model.fit(x_train, y_train)
  rez.append(mean_absolute_error(y_test, model.predict(x_test)))
  print(mean_absolute_error(y_test, model.predict(x_test)))

rez.sort()
print(rez[0])

model = Ridge(alpha = 2, fit_intercept = True)
model.fit(x_train, y_train)
dat = x_test[['Manual', 'year']]
dat['truevalue'] = y_test
dat['pred'] = model.predict(x_test).astype(int)
dat.head(50)

mean_absolute_error(y_test, model.predict(x_test))

model.coef_